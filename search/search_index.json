{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CI/CD Docs Package Meta The toolkit for building extension modules . License \u00b6 extensionlib is distributed under the terms of the MIT license. Navigation \u00b6 Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#license","text":"extensionlib is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"builders/","text":"Builders \u00b6 Extension module builders are expected to implement the ExtensionModules interface. from extension.interface import ExtensionModules class ExampleExtensionModules ( ExtensionModules ): ... Plugin registration \u00b6 Every builder a project implements must be defined under the extensions entry point group: pyproject.toml [project.entry-points.extensions] example = \"pkg:ExampleExtensionModules\" Users select builders with the name of their plugin (in this case example ). Inputs \u00b6 Inputs are any intermediate artifacts that are required to generate the outputs , ideally even without network access. The required methods are inputs and generate_inputs . Outputs \u00b6 Outputs are the extension modules and anything else that is required in the built distribution. The required methods are outputs and generate_outputs . Build data \u00b6 Both generation methods accept a data parameter that is a mapping that will persist for the life of all extension module builders that may be mutated by each one. The primary use case is to set target-specific data e.g. a wheel target may recognize tag-related options.","title":"Builders"},{"location":"builders/#builders","text":"Extension module builders are expected to implement the ExtensionModules interface. from extension.interface import ExtensionModules class ExampleExtensionModules ( ExtensionModules ): ...","title":"Builders"},{"location":"builders/#plugin-registration","text":"Every builder a project implements must be defined under the extensions entry point group: pyproject.toml [project.entry-points.extensions] example = \"pkg:ExampleExtensionModules\" Users select builders with the name of their plugin (in this case example ).","title":"Plugin registration"},{"location":"builders/#inputs","text":"Inputs are any intermediate artifacts that are required to generate the outputs , ideally even without network access. The required methods are inputs and generate_inputs .","title":"Inputs"},{"location":"builders/#outputs","text":"Outputs are the extension modules and anything else that is required in the built distribution. The required methods are outputs and generate_outputs .","title":"Outputs"},{"location":"builders/#build-data","text":"Both generation methods accept a data parameter that is a mapping that will persist for the life of all extension module builders that may be mutated by each one. The primary use case is to set target-specific data e.g. a wheel target may recognize tag-related options.","title":"Build data"},{"location":"config/","text":"Configuration \u00b6 Users are expected to configure their extension modules in TOML as an array of tables with the final sub-table name referring to a plugin . For example: pyproject.toml [[project.extensions.spam]] ... [[project.extensions.example]] ... [[project.extensions.example]] ... [[project.extensions.foo]] ...","title":"Config"},{"location":"config/#configuration","text":"Users are expected to configure their extension modules in TOML as an array of tables with the final sub-table name referring to a plugin . For example: pyproject.toml [[project.extensions.spam]] ... [[project.extensions.example]] ... [[project.extensions.example]] ... [[project.extensions.foo]] ...","title":"Configuration"},{"location":"history/","text":"History \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 0.1.0 - 2022-06-12 \u00b6 This is the initial public release.","title":"History"},{"location":"history/#history","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"History"},{"location":"history/#unreleased","text":"","title":"Unreleased"},{"location":"history/#010-2022-06-12","text":"This is the initial public release.","title":"0.1.0 - 2022-06-12"},{"location":"interface/","text":"Interface \u00b6 ExtensionModules \u00b6 __init__ ( name : str , root : str , metadata : dict , config : dict ) -> None \u00b6 Parameters: Name Type Description Default name str The name used to register this extension module builder. required root str The project's root directory. required metadata dict The PEP 621 project metadata. required config dict The raw user-defined configuration. required inputs () -> list [ str ] abstractmethod \u00b6 Returns: Type Description list [ str ] The complete list of files or directories that are targeted for generation by the generate_inputs method. These are any intermediate artifacts that are required to generate the outputs , ideally even without network access. Each path must be relative to the project root . outputs () -> list [ str ] abstractmethod \u00b6 Returns: Type Description list [ str ] The complete list of files or directories that are targeted for generation by the generate_outputs method. These are the extension modules and anything else that is required in the built distribution. Each path must be relative to the project root . generate_inputs ( data : dict ) -> None abstractmethod \u00b6 This method generates the files or directories that are returned by the inputs method. Parameters: Name Type Description Default data dict Options specific to source distributions. required generate_outputs ( data : dict ) -> None abstractmethod \u00b6 This method generates the files or directories that are returned by the outputs method. Parameters: Name Type Description Default data dict Options specific to built distributions. required get_env_option ( option : str ) -> str \u00b6 Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> . name () -> str property \u00b6 The name used to register this extension module builder. root () -> str property \u00b6 The project's root directory. metadata () -> dict property \u00b6 The PEP 621 project metadata. config () -> dict property \u00b6 The raw user-defined configuration. BuildRunner \u00b6 __init__ ( root : str , metadata : dict ) -> None \u00b6 Parameters: Name Type Description Default root str The project's root directory. required metadata dict The PEP 621 project metadata. required inputs () -> list [ str ] \u00b6 Returns: Type Description list [ str ] The complete list of builder inputs . outputs () -> list [ str ] \u00b6 Returns: Type Description list [ str ] The complete list of builder outputs . generate_inputs ( data : dict ) -> None \u00b6 Parameters: Name Type Description Default data dict Options specific to source distributions. required generate_outputs ( data : dict ) -> None \u00b6 Parameters: Name Type Description Default data dict Options specific to built distributions. required","title":"Interface"},{"location":"interface/#interface","text":"","title":"Interface"},{"location":"interface/#extension.interface.ExtensionModules","text":"","title":"ExtensionModules"},{"location":"interface/#extension._interface.ExtensionModules.__init__","text":"Parameters: Name Type Description Default name str The name used to register this extension module builder. required root str The project's root directory. required metadata dict The PEP 621 project metadata. required config dict The raw user-defined configuration. required","title":"__init__()"},{"location":"interface/#extension._interface.ExtensionModules.inputs","text":"Returns: Type Description list [ str ] The complete list of files or directories that are targeted for generation by the generate_inputs method. These are any intermediate artifacts that are required to generate the outputs , ideally even without network access. Each path must be relative to the project root .","title":"inputs()"},{"location":"interface/#extension._interface.ExtensionModules.outputs","text":"Returns: Type Description list [ str ] The complete list of files or directories that are targeted for generation by the generate_outputs method. These are the extension modules and anything else that is required in the built distribution. Each path must be relative to the project root .","title":"outputs()"},{"location":"interface/#extension._interface.ExtensionModules.generate_inputs","text":"This method generates the files or directories that are returned by the inputs method. Parameters: Name Type Description Default data dict Options specific to source distributions. required","title":"generate_inputs()"},{"location":"interface/#extension._interface.ExtensionModules.generate_outputs","text":"This method generates the files or directories that are returned by the outputs method. Parameters: Name Type Description Default data dict Options specific to built distributions. required","title":"generate_outputs()"},{"location":"interface/#extension._interface.ExtensionModules.get_env_option","text":"Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> .","title":"get_env_option()"},{"location":"interface/#extension._interface.ExtensionModules.name","text":"The name used to register this extension module builder.","title":"name()"},{"location":"interface/#extension._interface.ExtensionModules.root","text":"The project's root directory.","title":"root()"},{"location":"interface/#extension._interface.ExtensionModules.metadata","text":"The PEP 621 project metadata.","title":"metadata()"},{"location":"interface/#extension._interface.ExtensionModules.config","text":"The raw user-defined configuration.","title":"config()"},{"location":"interface/#extension.runner.BuildRunner","text":"","title":"BuildRunner"},{"location":"interface/#extension._runner.BuildRunner.__init__","text":"Parameters: Name Type Description Default root str The project's root directory. required metadata dict The PEP 621 project metadata. required","title":"__init__()"},{"location":"interface/#extension._runner.BuildRunner.inputs","text":"Returns: Type Description list [ str ] The complete list of builder inputs .","title":"inputs()"},{"location":"interface/#extension._runner.BuildRunner.outputs","text":"Returns: Type Description list [ str ] The complete list of builder outputs .","title":"outputs()"},{"location":"interface/#extension._runner.BuildRunner.generate_inputs","text":"Parameters: Name Type Description Default data dict Options specific to source distributions. required","title":"generate_inputs()"},{"location":"interface/#extension._runner.BuildRunner.generate_outputs","text":"Parameters: Name Type Description Default data dict Options specific to built distributions. required","title":"generate_outputs()"},{"location":"runners/","text":"Runners \u00b6 Managing the building of extension modules is done using an instance of BuildRunner . from extension.runner import BuildRunner ... runner = BuildRunner ( '.' , user_config [ 'project' ]) ... Usage \u00b6 Generation \u00b6 Inputs : build_data = {} runner . generate_inputs ( build_data ) Outputs : build_data = {} runner . generate_outputs ( build_data ) Artifact inspection \u00b6 Inputs : inputs = runner . inputs () Outputs : outputs = runner . outputs () Options \u00b6 Some options affect the behavior of builds and are stripped out from the final configuration . Enabling \u00b6 Users may set enable-by-default to false for any entry which will prevent it from being built. To enable it again users must set the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_ENABLE to true or 1 . To illustrate, users can enable the following: pyproject.toml [[project.extensions.spam]] enable-by-default = false ... with the environment variable PY_EXTENSION_BUILDER_SPAM_ENABLE .","title":"Runners"},{"location":"runners/#runners","text":"Managing the building of extension modules is done using an instance of BuildRunner . from extension.runner import BuildRunner ... runner = BuildRunner ( '.' , user_config [ 'project' ]) ...","title":"Runners"},{"location":"runners/#usage","text":"","title":"Usage"},{"location":"runners/#generation","text":"Inputs : build_data = {} runner . generate_inputs ( build_data ) Outputs : build_data = {} runner . generate_outputs ( build_data )","title":"Generation"},{"location":"runners/#artifact-inspection","text":"Inputs : inputs = runner . inputs () Outputs : outputs = runner . outputs ()","title":"Artifact inspection"},{"location":"runners/#options","text":"Some options affect the behavior of builds and are stripped out from the final configuration .","title":"Options"},{"location":"runners/#enabling","text":"Users may set enable-by-default to false for any entry which will prevent it from being built. To enable it again users must set the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_ENABLE to true or 1 . To illustrate, users can enable the following: pyproject.toml [[project.extensions.spam]] enable-by-default = false ... with the environment variable PY_EXTENSION_BUILDER_SPAM_ENABLE .","title":"Enabling"},{"location":"users/","text":"Users \u00b6 The following is not intended to be a complete enumeration. Project Description","title":"Users"},{"location":"users/#users","text":"The following is not intended to be a complete enumeration. Project Description","title":"Users"},{"location":"utilities/","text":"Utilities \u00b6 get_env_option ( builder_name : str , option : str ) -> str \u00b6 Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> . normalize_relative_path ( path : str ) -> str \u00b6 Returns: Type Description str The normalized relative path with platform-specific separators.","title":"Utilities"},{"location":"utilities/#utilities","text":"","title":"Utilities"},{"location":"utilities/#extension.utils.get_env_option","text":"Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> .","title":"get_env_option()"},{"location":"utilities/#extension.utils.normalize_relative_path","text":"Returns: Type Description str The normalized relative path with platform-specific separators.","title":"normalize_relative_path()"}]}