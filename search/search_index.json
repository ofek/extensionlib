{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CI/CD Docs Package Meta The toolkit for building extension modules . License \u00b6 extensionlib is distributed under the terms of the MIT license. Navigation \u00b6 Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#license","text":"extensionlib is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"builders/","text":"Builders \u00b6 Extension module builders are expected to implement the ExtensionModules interface. from extension.interface import ExtensionModules class ExampleExtensionModules ( ExtensionModules ): ... Plugin registration \u00b6 Every builder your project implements must be defined under the extension_modules entry point group : pyproject.toml [project.entry-points.extension_modules] example = \"pkg:ExampleExtensionModules\" Users select builders with the name of their plugin (in this case example ). Required methods \u00b6 The required methods are files and build . The files method returns a list of relative file paths which build backends will (if present) include in wheels and other tools may use for cleaning purposes. The build method MUST NOT generate any file that is not returned by the files method.","title":"Builders"},{"location":"builders/#builders","text":"Extension module builders are expected to implement the ExtensionModules interface. from extension.interface import ExtensionModules class ExampleExtensionModules ( ExtensionModules ): ...","title":"Builders"},{"location":"builders/#plugin-registration","text":"Every builder your project implements must be defined under the extension_modules entry point group : pyproject.toml [project.entry-points.extension_modules] example = \"pkg:ExampleExtensionModules\" Users select builders with the name of their plugin (in this case example ).","title":"Plugin registration"},{"location":"builders/#required-methods","text":"The required methods are files and build . The files method returns a list of relative file paths which build backends will (if present) include in wheels and other tools may use for cleaning purposes. The build method MUST NOT generate any file that is not returned by the files method.","title":"Required methods"},{"location":"history/","text":"History \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6","title":"History"},{"location":"history/#history","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"History"},{"location":"history/#unreleased","text":"","title":"Unreleased"},{"location":"interface/","text":"Interface \u00b6 ExtensionModules \u00b6 build ( data : dict ) -> None abstractmethod \u00b6 This method builds the extension modules. Any generated file that is not returned by the files method is in violation of the spec and will be ignored. Parameters: Name Type Description Default data dict A mapping that will persist for the life of all extension module builders that may be mutated by each one. The primary use case is to set builder-specific data e.g. a wheel builder may recognize tag-related options. required files () -> list [ str ] abstractmethod \u00b6 Returns: Type Description list [ str ] The complete list of files that are targeted for generation . Each path must be relative to the project root . needs_build () -> bool \u00b6 Returns: Type Description bool A boolean indicating whether or not a build is necessary. For example, if no source files have changed implementations may return False . get_env_option ( option : str ) -> str \u00b6 Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> . name () -> str property \u00b6 The name used to register this extension module builder. root () -> str property \u00b6 The project's root directory. config () -> dict property \u00b6 The raw user-defined configuration. BuildRunner \u00b6 __init__ ( root : str ) -> None \u00b6 Parameters: Name Type Description Default root str The project's root directory. required build ( builder_name : str , config_entries : list [ dict ], data : dict ) -> None \u00b6 Parameters: Name Type Description Default builder_name str The name of the registered extension module builder with which to use. required config_entries list [ dict ] A list of user defined configuration each intended for a distinct instance of the chosen builder. required data dict A mapping that will persist for the life of all extension module builders that may be mutated by each one. The primary use case is to set builder-specific data e.g. a wheel builder may recognize tag-related options. required","title":"Interface"},{"location":"interface/#interface","text":"","title":"Interface"},{"location":"interface/#extension.interface.ExtensionModules","text":"","title":"ExtensionModules"},{"location":"interface/#extension._interface.ExtensionModules.build","text":"This method builds the extension modules. Any generated file that is not returned by the files method is in violation of the spec and will be ignored. Parameters: Name Type Description Default data dict A mapping that will persist for the life of all extension module builders that may be mutated by each one. The primary use case is to set builder-specific data e.g. a wheel builder may recognize tag-related options. required","title":"build()"},{"location":"interface/#extension._interface.ExtensionModules.files","text":"Returns: Type Description list [ str ] The complete list of files that are targeted for generation . Each path must be relative to the project root .","title":"files()"},{"location":"interface/#extension._interface.ExtensionModules.needs_build","text":"Returns: Type Description bool A boolean indicating whether or not a build is necessary. For example, if no source files have changed implementations may return False .","title":"needs_build()"},{"location":"interface/#extension._interface.ExtensionModules.get_env_option","text":"Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> .","title":"get_env_option()"},{"location":"interface/#extension._interface.ExtensionModules.name","text":"The name used to register this extension module builder.","title":"name()"},{"location":"interface/#extension._interface.ExtensionModules.root","text":"The project's root directory.","title":"root()"},{"location":"interface/#extension._interface.ExtensionModules.config","text":"The raw user-defined configuration.","title":"config()"},{"location":"interface/#extension.runner.BuildRunner","text":"","title":"BuildRunner"},{"location":"interface/#extension._runner.BuildRunner.__init__","text":"Parameters: Name Type Description Default root str The project's root directory. required","title":"__init__()"},{"location":"interface/#extension._runner.BuildRunner.build","text":"Parameters: Name Type Description Default builder_name str The name of the registered extension module builder with which to use. required config_entries list [ dict ] A list of user defined configuration each intended for a distinct instance of the chosen builder. required data dict A mapping that will persist for the life of all extension module builders that may be mutated by each one. The primary use case is to set builder-specific data e.g. a wheel builder may recognize tag-related options. required","title":"build()"},{"location":"runners/","text":"Runners \u00b6 Managing the building of extension modules is done using an instance of BuildRunner . from extension.runner import BuildRunner runner = BuildRunner ( '.' ) ... Usage \u00b6 Users are expected to configure their extension modules in TOML as an array of tables with the final sub-table name referring to a plugin . For example: pyproject.toml [[tool.extensionlib.spam]] ... [[tool.extensionlib.example]] ... [[tool.extensionlib.example]] ... [[tool.extensionlib.foo]] ... Runners must build each entry: build_data = {} extensions = user_config [ 'tool' ][ 'extensions' ] for builder_name , config_entries in extensions . items (): runner . build ( builder_name , configs , build_data ) Options \u00b6 Some options affect the behavior of builds and are stripped out from the final configuration . Enabling \u00b6 Users may set enable-by-default to false for any entry which will prevent it from being built. To enable it again users must set the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_ENABLE to true or 1 . To illustrate, users can enable the following: pyproject.toml [[tool.extensionlib.spam]] enable-by-default = false ... with the environment variable PY_EXTENSION_BUILDER_SPAM_ENABLE . Forced builds \u00b6 Builders can indicate that config entries should be skipped, maybe because no files have changed. Users can override this behavior with the force-rebuild option: pyproject.toml [[tool.extensionlib.spam]] force-rebuild = true ...","title":"Runners"},{"location":"runners/#runners","text":"Managing the building of extension modules is done using an instance of BuildRunner . from extension.runner import BuildRunner runner = BuildRunner ( '.' ) ...","title":"Runners"},{"location":"runners/#usage","text":"Users are expected to configure their extension modules in TOML as an array of tables with the final sub-table name referring to a plugin . For example: pyproject.toml [[tool.extensionlib.spam]] ... [[tool.extensionlib.example]] ... [[tool.extensionlib.example]] ... [[tool.extensionlib.foo]] ... Runners must build each entry: build_data = {} extensions = user_config [ 'tool' ][ 'extensions' ] for builder_name , config_entries in extensions . items (): runner . build ( builder_name , configs , build_data )","title":"Usage"},{"location":"runners/#options","text":"Some options affect the behavior of builds and are stripped out from the final configuration .","title":"Options"},{"location":"runners/#enabling","text":"Users may set enable-by-default to false for any entry which will prevent it from being built. To enable it again users must set the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_ENABLE to true or 1 . To illustrate, users can enable the following: pyproject.toml [[tool.extensionlib.spam]] enable-by-default = false ... with the environment variable PY_EXTENSION_BUILDER_SPAM_ENABLE .","title":"Enabling"},{"location":"runners/#forced-builds","text":"Builders can indicate that config entries should be skipped, maybe because no files have changed. Users can override this behavior with the force-rebuild option: pyproject.toml [[tool.extensionlib.spam]] force-rebuild = true ...","title":"Forced builds"},{"location":"users/","text":"Users \u00b6 The following is not intended to be a complete enumeration. Project Description","title":"Users"},{"location":"users/#users","text":"The following is not intended to be a complete enumeration. Project Description","title":"Users"},{"location":"utilities/","text":"Utilities \u00b6 get_env_option ( builder_name : str , option : str ) -> str \u00b6 Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> .","title":"Utilities"},{"location":"utilities/#utilities","text":"","title":"Utilities"},{"location":"utilities/#extension.utils.get_env_option","text":"Returns: Type Description str The value of the upper-cased environment variable PY_EXTENSION_BUILDER_<builder_name>_<option> .","title":"get_env_option()"}]}